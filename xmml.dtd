<!--
Document Type Definition DTD of the xMML format version 0.3.2, 2011-07-07
Author: Joris Borgdorff, J.Borgdorff@uva.nl
For the latest version, consult the MAPPER project Wiki
-->

<!--
Define reusable attribute entities
==================================
-->

<!-- A scale, with an optional name, step size and maximum value -->
<!ENTITY % scale
  "id NMTOKENS #IMPLIED
  delta CDATA #IMPLIED
  total CDATA #IMPLIED
  characteristic CDATA #IMPLIED">

<!-- A variable scale, with an optional minimum and maximum value. If the type
     is fixed, then during runtime this value will not vary and must be
     specified for each submodel instance that uses it. -->
<!ENTITY % varscale
  "type (variable|fixed) 'variable'
  min CDATA #IMPLIED
  max CDATA #IMPLIED">

<!-- The id, submodel execution loop operator and datatype of a port. If it
     concerns the port of a mapper, an operator should not be specified. The 
     optional type can be used to specify whether it concerns a port that only
     transfers a state or a regular one. -->
<!ENTITY % port
  "id NMTOKEN #REQUIRED
  operator (Of|Oi|B|S|finit) #IMPLIED
  datatype IDREF #IMPLIED
  type (state|normal) 'normal'">

<!-- Represent an implemented entity -->
<!ENTITY % real
  "id ID #REQUIRED
  class CDATA #IMPLIED
  version CDATA #IMPLIED">

<!--
Define all elements
===================
-->

<!-- Root element of a single multiscale model -->
<!ELEMENT model (description?,definitions,topology)>
<!ATTLIST model
  id ID #REQUIRED
  xmlns:xi CDATA #IMPLIED
  name CDATA #IMPLIED
  version CDATA #IMPLIED
  xmml_version CDATA #FIXED "0.3.2">

<!-- A short textual description of the parent element (model or submodel) -->
<!ELEMENT description (#PCDATA)>

<!-- Type definitions within the model -->
<!ELEMENT definitions (datatype*,(filter|mapper|submodel)+)>

<!-- An implemented datatype. The size_estimate attribute may be a function
     in terms of the scales and params of the submodel it originated from -->
<!ELEMENT datatype EMPTY>
<!ATTLIST datatype
  %real;
  size_estimate CDATA #IMPLIED>

<!-- A conduit filter, filtering a type of data and either converting it to
     another type of data, or reducing the data over a dimension with a
     certain factor, or interpolating in that dimension. -->
<!ELEMENT filter (description?,implementation?,extra*)>
<!ATTLIST filter
  %real;
  datatype_in IDREF #IMPLIED
  datatype_out IDREF #IMPLIED
  type (interpolation|reduction|converter) #REQUIRED
  dimension CDATA #IMPLIED
  factor CDATA #IMPLIED>

<!-- A fan-in or fan-out mapper. If the type is fan-in, it may have multiple
     in ports and one out port, otherwise, one in port and multiple out ports.
     Implementation details may also be relevant. A fan-in mapper may have
     the same in port used for a submodel instance with a multiplicity, and
     conversely for the fan-out mapper. A filter with multiple inputs can be
     constructed as a fan-in mapper. In and out ports may not have an operator
     specified. -->
<!ELEMENT mapper (description?,ports,implementation?,extra*)>
<!ATTLIST mapper 
  %real;
  init (yes|no) "no"
  type (fan-in|fan-out) #REQUIRED
  interactive (yes|no|optional) "no">

<!-- Definition of a single code of a single submodel. Attributes state whether
     the submodel should be started at initialization if this is ambiguous,
     whether it is stateful or not, or that it is optional but may bring some
     optimization, and whether user interaction is required while running
     the submodel. -->
<!ELEMENT submodel (description?,timescale,spacescale*,otherscale*,param*,ports,implementation?,extra*)>
<!ATTLIST submodel
  %real;
  name CDATA #IMPLIED
  init (yes|no) "no"
  stateful (yes|no|optional) "no"
  interactive (yes|no|optional) "no">

<!-- Implementation details of the submodel. Runtime should be interpreted as
     typical runtime on the platforms that are specified. Size is the code
     size. Language is the programming language that is used. -->
<!ELEMENT implementation (platform*,library*)>
<!ATTLIST implementation
  size CDATA #IMPLIED
  runtime CDATA #IMPLIED
  memory CDATA #IMPLIED
  cores NMTOKEN #IMPLIED
  language CDATA #IMPLIED>

<!-- Platforms a submodel can run on, including architecture and operating
     system. If more than one platforms are listed, a preference can be made. -->
<!ELEMENT platform EMPTY>
<!ATTLIST platform
  arch CDATA #IMPLIED
  os CDATA #REQUIRED
  preferred (yes|no) #IMPLIED>

<!-- Libraries that the submodel implementation requires. -->
<!ELEMENT library EMPTY>
<!ATTLIST library
  name CDATA #REQUIRED>

<!-- Scale information of a submodel. This can be static, by specifying it as
     attributes, or dynamic, by having ranges -->
<!ELEMENT timescale (delta?,max?)>
<!ATTLIST timescale %scale;>

<!-- Same as above, but for space. Either all dimensions can be listed
     separately, or the number of dimensions can be given, using only one tag. -->
<!ELEMENT spacescale (delta?,max?)>
<!ATTLIST spacescale
  %scale;
  dimensions NMTOKEN #IMPLIED>

<!-- Same as above, but for any dimension that is not time or space. -->
<!ELEMENT otherscale (delta?,max)>
<!ATTLIST otherscale
  %scale;
  type CDATA #IMPLIED
  dimensions NMTOKEN #IMPLIED>

<!-- Same as above, but for an important quantity that is not a dimension.
     Useful for specifying the size of a datatype, or stating a fundamental
     non-variable fact. It is not meant for completely parameterizing a
     submodel, since this should be done at time of execution. -->
<!ELEMENT param EMPTY>
<!ATTLIST param 
  id NMTOKEN #REQUIRED
  value CDATA #REQUIRED>

<!ELEMENT delta EMPTY>
<!ATTLIST delta %varscale;>

<!ELEMENT total EMPTY>
<!ATTLIST total %varscale;>

<!-- Any information about a submodel not captured by any of the other tags.
     If this is used, possibly the information therein can also be included
     in the official format; if so, please contact me. -->
<!ELEMENT extra ANY>

<!-- All in and out ports of a submodel.-->
<!ELEMENT ports (in|out)*>
<!-- Both in and out ports can be used to send composite data, as long
     as they are described by a single data type. -->
<!ELEMENT in EMPTY>
<!ATTLIST in %port;>
<!ELEMENT out EMPTY>
<!ATTLIST out %port;>

<!-- The instantiation of submodels and couplings between them -->
<!ELEMENT topology (instance|coupling)+>

<!-- An instance of a submodel or mapper, by default using the same id as the
     submodel. A submodel instance may override some of the scale information
     that was supplied in the submodel definition. Also a domain name may be
     supplied, which can be used to identify single domain interaction. A
     multiplicity is a number that specifies how many instances should be
     created. If this argument is used and not 1, it should be connected
     using mappers. Alternatively, different instances can be addressed using
     array notation, for instance: instanceA[0]. Mappers may not specify a
     multiplicity or be stateful. -->
<!ELEMENT instance (timescale?,spacescale*,otherscale*,param*,extra*)>
<!ATTLIST instance
  id ID #IMPLIED
  submodel IDREF #IMPLIED
  mapper IDREF #IMPLIED
  domain CDATA #IMPLIED
  init (yes|no) #IMPLIED
  interactive (yes|no|optional) #IMPLIED
  stateful (yes|no|optional) #IMPLIED
  multiplicity NMTOKEN #IMPLIED>
  
<!-- A coupling from one submodel instance or mapper to the other.
     Notation: instance1.outport to instance2.inport. Interactive means
     that the data that is sent through the conduit must be evaluated manually
     before it can be passed to the next. Size can be specified if not already
     done in the datatypes. -->
<!ELEMENT coupling (apply*,extra*)>
<!ATTLIST coupling
  name CDATA #IMPLIED
  from CDATA #REQUIRED
  to CDATA #REQUIRED
  size CDATA #IMPLIED
  interactive (yes|no|optional) "no">

<!-- Specify filters that will be applied to the conduit. The order that they
     are specified in is preserved. The factor, belonging to the filter,
     can be overridden. -->
<!ELEMENT apply (param*,extra*)>
<!ATTLIST apply
  filter IDREF #REQUIRED
  factor CDATA #IMPLIED>
